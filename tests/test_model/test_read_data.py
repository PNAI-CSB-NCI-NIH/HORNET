import os
import pandas as pd
import unittest
from unittest.mock import patch
import sys
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../../src")
from hornet.model import read_data

class TestReadData(unittest.TestCase):
    
    def setUp(self):
        self.path = ".data_test_read_data"
        self.dataset = [f"{self.path}/data1.csv", f"{self.path}/data2.csv"]
        self.n_residues = [100, 200]
        self.min_frame = 2005
        self.max_kappa = 50

        # Create temporary dir
        if not os.path.exists(self.path):
            os.makedirs(self.path)

        # Create temporary files
        file1 = open(f"{self.path}/data1.csv", "w")
        file2 = open(f"{self.path}/data2.csv", "w")
        file3 = open(f"{self.path}/data3.csv", "w")

        # Write data to files
        file1.write(
            """
step,tempk,radg,etot,velet,qscore,rmsd_C,local,go,repul,stack,hbond,elect,afmcc,afmfit,stage,frame,kapa,Unnamed: 0,baseP,baseS,native
200000.0,298.0,38.2,-6435.69,723.61,0.907,16.59,559.87,-500.46,5.08,-3497.31,-3308.91,273.67,0.994218,38.49,-7.13,2001,14,2.0,79.0,148.0,916.0
200100.0,298.0,38.18,-6371.51,695.08,0.895,16.58,575.02,-491.52,5.68,-3490.16,-3305.99,273.56,0.9899084,67.18,-6.27,2002,14,3.0,62.0,132.0,934.0
200200.0,298.0,38.19,-6335.16,694.52,0.888,16.58,578.69,-484.76,7.09,-3489.37,-3300.82,273.54,0.9872071,85.16,-5.68,2003,14,4.0,64.0,151.0,895.0
200300.0,298.0,38.18,-6387.14,720.27,0.896,16.58,578.09,-490.7,5.57,-3502.73,-3301.55,273.52,0.9915807,56.04,-6.38,2004,14,5.0,62.0,152.0,922.0
200400.0,298.0,38.17,-6426.88,731.87,0.9,16.59,570.88,-493.83,6.64,-3505.78,-3305.19,272.85,0.9950417,33.01,-6.45,2005,14,6.0,64.0,148.0,899.0
200500.0,298.0,38.14,-6387.7,709.03,0.9,16.59,589.23,-497.53,5.08,-3495.5,-3304.66,273.8,0.9930109,46.52,-5.63,2006,14,7.0,69.0,136.0,933.0
200600.0,298.0,38.11,-6361.64,721.41,0.889,16.58,581.82,-483.56,3.31,-3498.61,-3302.4,274.19,0.9895878,69.31,-6.7,2007,14,8.0,62.0,151.0,904.0
200700.0,298.0,38.09,-6325.19,689.58,0.892,16.59,608.73,-482.29,3.41,-3481.15,-3301.17,272.96,0.9912005,58.58,-5.24,2008,14,9.0,54.0,144.0,887.0
200800.0,298.0,38.06,-6380.77,753.21,0.884,16.61,569.61,-483.22,3.86,-3490.6,-3311.45,272.64,0.9903913,63.96,-6.56,2009,14,10.0,53.0,148.0,947.0
200900.0,298.0,38.02,-6407.21,762.57,0.903,16.62,578.09,-498.38,4.82,-3498.2,-3303.36,273.31,0.9936443,42.31,-6.78,2010,14,11.0,80.0,142.0,926.0"""
        )

        file2.write(
            """step,tempk,radg,etot,velet,qscore,rmsd_C,local,go,repul,stack,hbond,elect,afmcc,afmfit,stage,frame,kapa,Unnamed: 0,baseP,baseS,native
200000.0,298.0,38.2,-6435.69,723.61,0.907,16.59,559.87,-500.46,5.08,-3497.31,-3308.91,273.67,0.994218,38.49,-7.13,2011,14,2.0,79.0,148.0,916.0
200100.0,298.0,38.18,-6371.51,695.08,0.895,16.58,575.02,-491.52,5.68,-3490.16,-3305.99,273.56,0.9899084,67.18,-6.27,2012,14,3.0,62.0,132.0,934.0
200200.0,298.0,38.19,-6335.16,694.52,0.888,16.58,578.69,-484.76,7.09,-3489.37,-3300.82,273.54,0.9872071,85.16,-5.68,2013,14,4.0,64.0,151.0,895.0
200300.0,298.0,38.18,-6387.14,720.27,0.896,16.58,578.09,-490.7,5.57,-3502.73,-3301.55,273.52,0.9915807,56.04,-6.38,2014,14,5.0,62.0,152.0,922.0
200400.0,298.0,38.17,-6426.88,731.87,0.9,16.59,570.88,-493.83,6.64,-3505.78,-3305.19,272.85,0.9950417,33.01,-6.45,2015,14,6.0,64.0,148.0,899.0
200500.0,298.0,38.14,-6387.7,709.03,0.9,16.59,589.23,-497.53,5.08,-3495.5,-3304.66,273.8,0.9930109,46.52,-5.63,2016,14,7.0,69.0,136.0,933.0
200600.0,298.0,38.11,-6361.64,721.41,0.889,16.58,581.82,-483.56,3.31,-3498.61,-3302.4,274.19,0.9895878,69.31,-6.7,2017,14,8.0,62.0,151.0,904.0
200700.0,298.0,38.09,-6325.19,689.58,0.892,16.59,608.73,-482.29,3.41,-3481.15,-3301.17,272.96,0.9912005,58.58,-5.24,2018,14,9.0,54.0,144.0,887.0
200800.0,298.0,38.06,-6380.77,753.21,0.884,16.61,569.61,-483.22,3.86,-3490.6,-3311.45,272.64,0.9903913,63.96,-6.56,2019,14,10.0,53.0,148.0,947.0
200900.0,298.0,38.02,-6407.21,762.57,0.903,16.62,578.09,-498.38,4.82,-3498.2,-3303.36,273.31,0.9936443,42.31,-6.78,2020,14,11.0,80.0,142.0,926.0"""
        )

        file3.write(
            """step,tempk,radg,etot,velet,qscore,rmsd_C,local,go,repul,stack,hbond,elect,afmcc,afmfit,stage,frame,kapa,Unnamed: 0,baseP,baseS,native,cc7xEtot
200500.0,298.0,38.14,-72.36056240409206,709.03,0.9,16.59,1.9641,-1.6584333333333332,0.016933333333333335,-25.702205882352942,-47.8936231884058,0.9126666666666667,0.9930109,0.011076190476190477,-5.63,2006,14,7.0,69.0,136.0,933.0,-68.89378465069926
200600.0,298.0,38.11,-75.18158544470555,721.41,0.889,16.58,1.9394000000000002,-1.6118666666666668,0.011033333333333334,-23.169602649006624,-53.26451612903226,0.9139666666666667,0.9895878,0.016502380952380952,-6.7,2007,14,8.0,62.0,151.0,904.0,-69.8701712268731
200700.0,298.0,38.09,-83.96473055555556,689.58,0.892,16.59,2.0291,-1.6076333333333335,0.011366666666666667,-24.17465277777778,-61.13277777777778,0.9098666666666666,0.9912005,0.013947619047619047,-5.24,2008,14,9.0,54.0,144.0,887.0,-78.92734349884691
200800.0,298.0,38.06,-84.85569048104708,753.21,0.884,16.61,1.8987,-1.6107333333333334,0.012866666666666667,-23.585135135135136,-62.48018867924528,0.9087999999999999,0.9903913,0.015228571428571428,-6.56,2009,14,10.0,53.0,148.0,947.0,-79.3101348733328
200900.0,298.0,38.02,-64.73441126760564,762.57,0.903,16.62,1.9269666666666667,-1.6612666666666667,0.016066666666666667,-24.635211267605634,-41.292,0.9110333333333334,0.9936443,0.010073809523809525,-6.78,2010,14,11.0,80.0,142.0,926.0,-61.908719546347506
200000.0,298.0,38.2,-64.95180968183374,723.61,0.907,16.59,0.9331166666666667,-0.8341,0.008466666666666667,-23.630472972972974,-41.88493670886076,0.45611666666666667,0.994218,0.0045821428571428575,-7.13,2011,14,2.0,79.0,148.0,916.0,-62.368113432544256
200100.0,298.0,38.18,-79.1584587487781,695.08,0.895,16.58,0.9583666666666666,-0.8191999999999999,0.009466666666666667,-26.440606060606058,-53.32241935483871,0.45593333333333336,0.9899084,0.007997619047619049,-6.27,2012,14,3.0,62.0,132.0,934.0,-73.73308350910621
200200.0,298.0,38.19,-74.05945642935983,694.52,0.888,16.58,0.9644833333333335,-0.8079333333333333,0.011816666666666666,-23.108410596026488,-51.5753125,0.4559,0.9872071,0.010138095238095238,-5.68,2013,14,4.0,64.0,151.0,895.0,-67.6765811616255
200300.0,298.0,38.18,-75.68428276740238,720.27,0.896,16.58,0.9634833333333334,-0.8178333333333333,0.009283333333333334,-23.044276315789475,-53.25080645161291,0.45586666666666664,0.9915807,0.006671428571428571,-6.38,2014,14,5.0,62.0,152.0,922.0,-71.33491621901717
200400.0,298.0,38.17,-74.73706311936937,731.87,0.9,16.59,0.9514666666666667,-0.82305,0.011066666666666666,-23.687702702702705,-51.64359375,0.45475000000000004,0.9950417,0.003929761904761905,-6.45,2015,14,6.0,64.0,148.0,899.0,-72.18134958827432
200500.0,298.0,38.14,-72.97819573742541,709.03,0.9,16.59,0.98205,-0.8292166666666666,0.008466666666666667,-25.702205882352942,-47.8936231884058,0.45633333333333337,0.9930109,0.005538095238095239,-5.63,2016,14,7.0,69.0,136.0,933.0,-69.48182731435543
200600.0,298.0,38.11,-75.80785211137221,721.41,0.889,16.58,0.9697000000000001,-0.8059333333333334,0.005516666666666667,-23.169602649006624,-53.26451612903226,0.45698333333333335,0.9895878,0.008251190476190476,-6.7,2017,14,8.0,62.0,151.0,904.0,-70.45219352628132
200700.0,298.0,38.09,-84.63608055555557,689.58,0.892,16.59,1.01455,-0.8038166666666667,0.005683333333333334,-24.17465277777778,-61.13277777777778,0.4549333333333333,0.9912005,0.006973809523809524,-5.24,2018,14,9.0,54.0,144.0,887.0,-79.55841647088356
200800.0,298.0,38.06,-85.46050714771374,753.21,0.884,16.61,0.94935,-0.8053666666666667,0.0064333333333333334,-23.585135135135136,-62.48018867924528,0.45439999999999997,0.9903913,0.007614285714285714,-6.56,2019,14,10.0,53.0,148.0,947.0,-79.87542508704789
200900.0,298.0,38.02,-65.33081126760564,762.57,0.903,16.62,0.9634833333333334,-0.8306333333333333,0.008033333333333333,-24.635211267605634,-41.292,0.4555166666666667,0.9936443,0.005036904761904762,-6.78,2020,14,11.0,80.0,142.0,926.0,-62.479086366937075"""
        )

        file1.close()
        file2.close()
        file3.close()

        self.expected_default = pd.read_csv(f"{self.path}/data3.csv")

    def tearDown(self):
        os.system(f"rm -r {self.path}")
    
    def test_read_data(self):
        # Call the function
        df_result = read_data(self.dataset, self.n_residues, self.min_frame, self.max_kappa)
        self.assertTrue(len(self.expected_default) == len(df_result))
        self.assertTrue(set(self.expected_default.columns) == set(df_result.columns))
    
    def test_read_data_custom(self):
        # Call the function
        df_result = read_data(self.dataset, self.n_residues, 10000, 0)
        expected_df = pd.DataFrame(columns="step,tempk,radg,etot,velet,qscore,rmsd_C,local,go,repul,stack,hbond,elect,afmcc,afmfit,stage,frame,kapa,Unnamed: 0,baseP,baseS,native,cc7xEtot".split(","))
        self.assertTrue(len(expected_df) == len(df_result))
        self.assertTrue(set(expected_df.columns) == set(df_result.columns))


if __name__ == '__main__':
    unittest.main()